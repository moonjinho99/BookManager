package com.tck.board.book.controller;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.Gson;
import com.tck.board.book.model.BookDTO;
import com.tck.board.book.service.BookService;
import com.tck.board.img.model.ImgDTO;
import com.tck.board.model.WrapperVO;

import net.coobird.thumbnailator.Thumbnails;

@Controller
@RequestMapping("/book/*")
public class BookController {
	
	@Autowired
	BookService bookService;
	
	@RequestMapping("/list")
	public String getBookList(){
		
		return "/book/bookList";
	}
	
	@RequestMapping(value="/list.do",method=RequestMethod.POST,produces="application/text;charset=utf-8")
	@ResponseBody
	public String selectList(@ModelAttribute BookDTO bookDTO) throws Exception
	{
		List<BookDTO> book = bookService.getBookList();
		System.out.println("책 목록 : "+book);
		Gson gson = new Gson();
		WrapperVO rntVO = new WrapperVO();
		rntVO.setAaData(book);
		String jsonString = gson.toJson(rntVO);
		
		
		System.out.println("JSON 데이터 : "+jsonString);
		
		return jsonString;
	}
	
	@RequestMapping(value="/bookReg",method=RequestMethod.GET,produces="application/text;charset=utf-8")
	public String bookRegPage()
	{
		return "/book/bookReg";
	}
	
	@RequestMapping(value="/uploadImg",method=RequestMethod.POST,produces="application/text;charset=utf-8")
	public void insertBook(MultipartFile uploadFile){
		String uploadFolder = "C:\\upload";
		
		SimpleDateFormat  sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		Date date = new Date();
		
		String str = sdf.format(date);
		
		String datePath = str.replace("-",File.separator);
		
		File uploadPath = new File(uploadFolder,datePath);
		
		if(uploadPath.exists() == false)
		{
			uploadPath.mkdirs();
		}
	
		ImgDTO imgDto = new ImgDTO();
		
		
		
		String uploadFileName = uploadFile.getOriginalFilename();
		
		imgDto.setImg_name(uploadFileName);
		imgDto.setImg_path(datePath);
		
		String uuid = UUID.randomUUID().toString();
		
		uploadFileName = uuid+"_"+uploadFileName;
		
		File saveFile = new File(uploadPath, uploadFileName);
		
		try{
			uploadFile.transferTo(saveFile);
			
			File thumbnailFile = new File(uploadPath,"s_"+uploadFileName);
			
			BufferedImage bo_image = ImageIO.read(saveFile);
			
			double ratio = 3;
			
			int width = (int) (bo_image.getWidth() / ratio);
			int height = (int) (bo_image.getHeight() / ratio);
			
			Thumbnails.of(saveFile)
			.size(width, height)
			.toFile(thumbnailFile);
			
			BufferedImage bt_image = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
			
			Graphics2D graphic = bt_image.createGraphics();
			
			graphic.drawImage(bo_image,0,0,300,500,null);
			
			ImageIO.write(bt_image, "jpg", thumbnailFile);
			
		} catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
			
	}
	
	@RequestMapping(value="/bookReg.do", method = RequestMethod.POST,produces="application/text;charset=utf-8")
	@ResponseBody
	public void insertBook(BookDTO bookDTO){
		System.out.println("데이터 삽입");
		bookService.insertBook(bookDTO);
	}
	
	@RequestMapping(value="/detail",method=RequestMethod.GET,produces="application/text;charset=utf-8")
	public String detailBook(HttpServletRequest request)
	{
		String book_code = request.getParameter("book_code");
		return "/book/bookDetail";
	}
	
	
	
}
